set cursorline                                    " Highlight current line
set autoread                                      " Reload files that have changed


" Use CTRL-S for saving, also in Insert mode
noremap   <C-S>         :update<CR>
vnoremap  <C-S>    <C-C>:update<CR>
inoremap  <C-S>    <C-O>:update<CR>

" EasyMotion
let g:EasyMotion_smartcase = 1
nmap  <Leader>s  <Plug>(easymotion-s2)
nmap  m          <Plug>(easymotion-next)
nmap  M          <Plug>(easymotion-prev)
map   <C-f>      <Plug>(easymotion-sn)
" nmap <Leader>t <Plug>(easymotion-t2)
" omap /         <Plug>(easymotion-tn)

" Quickly get out of insert mode without your fingers having to leave the
" home row (either use 'ii')
inoremap ii <Esc>`^
inoremap <Esc> <Esc>`^

" Ctrl-P
let g:ctrlp_map = ';'
let g:ctrlp_match_window_bottom = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0

nmap <Leader><Leader>t :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>
nmap <Leader><Leader>T :set expandtab tabstop=4 shiftwidth=4 softtabstop=2<CR>
nmap <Leader><Leader>M :set noexpandtab tabstop=4 softtabstop=2 shiftwidth=2<CR>
nmap <Leader><Leader>m :set expandtab tabstop=2 shiftwidth=2 softtabstop=2<CR>

noremap s l
nnoremap t gj
nnoremap n gk
nnoremap j gj
nnoremap k gk

" noremap k /c
" noremap , /n

if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode

  vmap <D-]> >gv
  vmap <D-[> <gv

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i]

  " Bubble single lines
  nmap <D-n> [e==
	nmap <D-t> ]e==
	nmap <D-k> [e==
	nmap <D-j> ]e==
	imap <D-k> <Esc>[e==gi
	imap <D-j> <Esc>]e==gi

   " Bubble multiple lines
	vmap <D-n> [e==gv
	vmap <D-t> ]e==gv
	vmap <D-k> [e==gv
	vmap <D-j> ]e==gv
else
	" Map command-[ and command-] to indenting or outdenting
	" while keeping the original selection in visual mode
	vmap ‘ >gv
	vmap “ <gv

	nmap ‘ >>
	nmap “ <<

	omap ‘ >>
	omap “ <<

	imap ‘ <Esc>>>i
	imap “ <Esc><<i

	" Bubble single lines
	nmap <Esc>n [e==
	nmap <Esc>t ]e==
	nmap <Esc>k [e==
	nmap <Esc>j ]e==
	imap <Esc>k <Esc>[e==gi
	imap <Esc>j <Esc>]e==gi

	" Bubble multiple lines
	vmap <Esc>n [e==gv
	vmap <Esc>t ]e==gv
	vmap <Esc>k [e==gv
	vmap <Esc>j ]e==gv
endif

map <silent> AA :set invnumber<cr>

colorscheme railscasts

set shell=/opt/homebrewrew/bin/bash
set noshelltemp

" Unite
let s:current = expand('%:p:h')
let &runtimepath = &runtimepath . ',~/.vim/bundle/vimproc/autoload,~/.vim/bundle/vimproc/plugin'
nnoremap <silent> <Leader>m :Unite -buffer-name=recent -winheight=10 file_mru<cr>
nnoremap <Leader>b :Unite -buffer-name=buffers -winheight=10 buffer<cr>
nnoremap <Leader>f :Unite grep:.<cr>

" Powerline
" let g:Powerline_symbols = 'fancy'
" set fillchars+=stl:\ ,stlnc:\
set encoding=utf-8
set t_Co=xterm-256color
set term=xterm-256color
set termencoding=utf-8

" configured CloseTag to load only for html/xml like files
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

" Toggle TagBar
nnoremap zz :TagbarToggle<CR>
let g:tagbar_usearrows        = 1
let g:tagbar_singleclick      = 1
let g:tagbar_indent           = 1
let g:tagbar_show_visibility  = 0

" Synctastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" NERDComment
map <D-/> <Plug>NERDCommenterToggle

" NERDTree
map ` :NERDTreeToggle<CR>
let NERDTreeMapOpenInTab='T'
let NERDTreeMapOpenInTabSilent='<Enter>'
let NERDTreeMapActivateNode='<Space>'
let NERDTreeMapOpenSplit='E'
let NERDTreeMapOpenVSplit='e'
let NERDTreeMapJumpNextSibling='S'
let NERDTreeMapJumpPrevSibling='H'
let NERDTreeMapJumpFirstChild='N'
let NERDTreeMapJumpLastChild='T'
let NERDTreeShowHidden=1
let NERDTreeMouseMode=2

" Open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if !argc() && !exists("s:std_in") | NERDTree | endif

" Close vim if the only window left open is a NERDTree
if !has('gui_running')
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
endif
" autocmd BufEnter * if !argc() && !exists("s:std_in") | NERDTreeToggle | endif
" autocmd BufEnter * NERDTreeMirror

" Fuzzy Find
set rtp+=/opt/homebrew/opt/fzf

" Folding
set foldlevelstart=100
set foldmethod=syntax
set nofoldenable
nnoremap  <silent> <Space>          @=(foldlevel('.')?'za':"\<Space>")<CR>
au        BufWinLeave               *.* mkview
au!       BufReadPost,BufWritePost  *.* silent loadview

" Taboo
let g:taboo_tab_format = '%m%W - %f '

" IndentLine
let g:indentLine_color_term = 239
let g:indentLine_char = '┆'

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'


if has("mouse")
  set mouse=a
  set mousehide
endif

if has('mouse_sgr')
    set ttymouse=sgr
endif

if has("clipboard")
    set clipboard=unnamed
endif

